@page "/color-game"
@using System.Threading;

<h1>Color game</h1>
<div>
    <h2><label>Score: @score</label></h2>
</div>
<div>
    <label>Remaining time: @remainingTimeInSec sec</label>
</div>
<div>
    @if (gameInProgress)
    {
        <button class="btn btn-primary" onclick="@StopGame">End game</button>
    }
    else
    {
        <button class="btn btn-primary" onclick="@StartGame">Start game</button>
    }
</div>

@*<input type="number" bind=@xLength />
<input type="number" bind=@yLength />*@

<style>
    .flex-container {
        padding: 0;
        margin: 0;
        list-style: none;
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -webkit-flex-flow: row;
        justify-content: space-around;
        line-height: 30px;
    }

    .flex-item {
        background: tomato;
        margin: 5px;
        color: white;
        font-weight: bold;
        font-size: 1.5em;
        text-align: center;
        flex: 1 0 auto;
        height: auto;
    }

        .flex-item:before {
            content: '';
            float: left;
            padding-top: 100%;
        }
</style>

@for (int i = 0; i < yLength; i++)
{
    <div class="flex-container">
        @for (int j = 0; j < xLength; j++)
        {
            <div class="flex-item" onclick="@CellClicked"></div>
        }
    </div>
}

@functions {
    static int setting_remainingTimeInSec = 60;

    int xLength = 20;
    int yLength = 8;
    int score = 0;
    int remainingTimeInSec = 0;
    bool gameInProgress = false;

    Timer timer;

    protected override void OnInit()
    {
        base.OnInit();

        timer = new Timer(new TimerCallback(_ =>
        {
            Console.WriteLine("Timer callback executing");

            if(remainingTimeInSec <= 0)
            {
                StopGame();
                return;
            }

            remainingTimeInSec--;

            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            this.StateHasChanged();
        }), null, Timeout.Infinite, Timeout.Infinite);

    }

    void StartGame()
    {
        remainingTimeInSec = setting_remainingTimeInSec;
        gameInProgress = true;
        score = 0;

        StartTimer();
    }

    void StopGame()
    {
        remainingTimeInSec = 0;
        gameInProgress = false;
        score = 0;

        StopTimer();
    }

    void StartTimer()
    {
        timer.Change(0, 1000);
    }

    void StopTimer()
    {
        timer.Change(Timeout.Infinite, Timeout.Infinite);
    }

    void CellClicked()
    {
        Console.WriteLine("CellClicked");

        if (gameInProgress)
        {
            score++;
        }
    }
}
